<?php namespace ProcessWire;

/**
 *
 * Action for ProcessInlineCompleteTinyMCE that allows quick insertion of Hanna Codes
 *
 * This module is a supplement for ProcessInlineCompleteTinyMCE.
 *
 * (c) 2022 by BitPoet https://github.com/bitpoet
 *
 * Released under MIT license 
 *
 */

class InlineCompleteTinyMCEActionHannaCode extends InlineCompleteTinyMCEAction {
	
	public static function getModuleInfo() {
		
		return array(
			"title"		=>	"Autocomplete for Hanna Code",
			"summary"	=>	"Add action for Hanna Code to Autocomplete for TinyMCE",
			"version"	=>	"0.0.5",
			"autoload"	=>	function() {
				$p = wire('page');
				if($p->template != "admin") return false;
				if($p->process === "ProcessPageEdit" || $p->process === "ProcessField" || $p->process === "ProcessInlineCompleteTinyMCE") {
					return true;
				}
				return false;
			},
			"requires"	=>	array(
				"ProcessInlineCompleteTinyMCE",
				"InlineCompleteTinyMCEAction",
				"TextformatterHannaCode"
			)
		);
	}
	
	public function init() {
		parent::init();
		$this->set('resultTpl', "{name}");
		$this->set('insertTpl', '{value}');
	}
	
	public function executeFilter($options) {

		$ret = [];

		$hanna = $this->modules->get('TextformatterHannaCode');

		$filter = $this->sanitizer->selectorValue($options->filter);

		$database = $this->wire('database');

		$sql = "SELECT `id`, `name`, `code` FROM hanna_code WHERE `name` LIKE '%$filter%' ORDER BY name LIMIT 0, 20";
		$query = $database->prepare($sql); 

		$query->execute();
		
		while($row = $query->fetch(\PDO::FETCH_OBJ)) {
			$entry = $hanna->openTag . $row->name;
			foreach($this->extractAttributes($row->code) as $attrName => $attrValue) {
				$entry .= " $attrName='$attrValue'";
			}
			$entry .= $hanna->closeTag;
			$ret[] = [
				"type"	=>	"autocompleteitem",
				"text"	=>	$this->fillTpl($this->get('resultTpl'), $row),
				"value" => $entry,
				"name" => $row->name
			];
		}
		
		return $ret;
	}
	
	
	protected function extractAttributes($code) {
		
		$attrs = [];
		$match = [];
		
		if(preg_match('~/\\*hc_attr\r?\n(.*?)hc_attr\\*/~s', $code, $match)) {
			$lines = preg_split('/\r?\n/', $match[1], 0, \PREG_SPLIT_NO_EMPTY);
			foreach($lines as $line) {
				trim($line);
				list($name, $value) = explode('=', $line, 2);
				$value = trim($value, '"');
				$attrs[$name] = $value;
			}
		}
		
		return $attrs;
	}
	
	
	public function getTrigger() {
		
		$hanna = $this->modules->get('TextformatterHannaCode');
		return $hanna->openTag;
		
	}
	
	
	/**
	 *
	 * We open the Hanna Code picker with the openTag configured in Hanna
	 *
	 */
	public function ___getActionSettings() {

		$hanna = $this->modules->get('TextformatterHannaCode');

		$settings = [
			"typeAheadAfter"		=>	$hanna->openTag,
		];
		return array_merge($settings, parent::___getActionSettings());
	}
	
	/**
	 *
	 * No special configurable fields here for CKEditor's input tab so far.
	 *
	 */
	public function ___getSettingsFields($field, $prefix) {
		$wrap = parent::___getSettingsFields($field, $prefix);
		
		return $wrap;
	}
}