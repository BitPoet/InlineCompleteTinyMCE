<?php namespace ProcessWire;

/**
 *
 * Action for ProcessInlineCompleteTinyMCE that allows quick insertion of links to users.
 *
 * This module is a supplement for ProcessInlineCompleteTinyMCE.
 *
 * (c) 2018 by BitPoet https://github.com/bitpoet
 *
 * Released under MIT license
 *
 */

class InlineCompleteTinyMCEActionUsers extends InlineCompleteTinyMCEAction {
	
	public static function getModuleInfo() {

		return array(
			"title"		=>	"Autocomplete for Users",
			"summary"	=>	"Add action for PW users to Autocomplete for TinyMCE",
			"version"	=>	"0.0.1",
			"autoload"	=>	function() {
				$p = wire('page');
				if($p->template != "admin") return false;
				if($p->process === "ProcessPageEdit" || $p->process === "ProcessField" || $p->process === "ProcessInlineCompleteTinyMCE") {
					return true;
				}
				return false;
			},
			"requires"	=>	array(
				"ProcessInlineCompleteTinyMCE",
				"InlineCompleteTinyMCEAction"
			)
		);
	}
	
	
	public function init() {
		parent::init();
		$this->set("resultTpl", "{name} [{email}]");
		$this->set("insertTpl", "<a class='inlineuser' href='mailto:{email}'>@{name}</a>");
		$this->set("userfields", []);
		$this->set("showUserImage", "0");
		$this->set("userImageField", "");
	}
	
	
	public function executeFilter($post) {

		$ret = [];
		
		$filter = $this->sanitizer->selectorValue($post->filter);

		$users = $this->users->find("name^=$filter");
		
		foreach($users as $usr) {
			
			if($this->showUserImage) {
				
				$this->log(sprintf('Configured to show user image, used field is %s, url is %s', $this->userImageField, $usr->getUnformatted($this->userImageField)->first()->url));
				
				$ret[] = [
					'type'		=>	'cardmenuitem',
					"label"		=>	$this->fillTpl($this->get('resultTpl'), $usr),
					"value"		=>	$this->fillTpl($this->get('insertTpl'), $usr),
					'items'		=>	[[
						'type'		=>	'cardimage',
						'src'		=>	$usr->getUnformatted($this->userImageField)->first()->url,
						'classes'	=>	['icua-image']
					], [
						'type'		=>	'cardtext',
						'text'		=>	$this->fillTpl($this->get('resultTpl'), $usr)
					]]
				];
				
				
			} else {
				
				$ret[] = array(
					"type"	=>	"autocompleteitem",
					"text"	=>	$this->fillTpl($this->get('resultTpl'), $usr),
					"value"	=>	$this->fillTpl($this->get('insertTpl'), $usr)
				);
								
			}
			
			
		}
		
		return $ret;
	}
	
	
	/**
	 *
	 * Override default settings here.
	 *
	 */
	public function ___getActionSettings() {
		return array(
			"typeAheadChar"			=>	"@",
			"typeAheadAfter"		=>	"@",
			"ddLabel"				=>	$this->_("Select User:"),
			"returnColumns"			=>	["name","email","url"],
			"isText"				=>	false,
		);
	}

	public function ___getSettingsFields($field, $prefix) {
		
		$wrap = parent::___getSettingsFields($field, $prefix);
		
		$ut = $this->templates->get("user");
		
		$f = $this->modules->get("InputfieldAsmSelect");
		$f->label = $this->_("Fields to return from search");
		$f->attr("name", "userfields");
		
		$opts = array();
		foreach($ut->fields as $ufield) {
			if($ufield->type instanceof FieldtypeText && $ufield->name != "email")
				$opts[$ufield->name] = $ufield->label ?: $ufield->name;
		}
		ksort($opts);
		
		$f->addOptions($opts);
		$f->attr("value", $this->userfields);
		$f->description = $this->_("By default, only name and email are returned from the search. Configure any additional fields here that you want to use in your label or value template.");
		$wrap->add($f);
		
		$f = $this->modules->get("InputfieldCheckbox");
		$f->label = $this->_("Show user avatar / image");
		$f->attr("name", "showUserImage");
		$f->checkedValue = "1";
		$wrap->add($f);
		
		
		// Retrieve all image fields from user template and at them to select
		$tpl = $this->templates->get("user");
		$flds = [];
		foreach($tpl->fields as $fld) {
			if($fld->type instanceof FieldtypeImage) {
				$flds[$fld->name] = $fld->label ?: $fld->name;
			}
		}
		$f = $this->modules->get("InputfieldSelect");
		$f->label = $this->_("Image field in user template");
		$f->description = $this->_("You need to add the image field manually to the user template and set it to type 'Single-file'");
		$f->attr("name", "userImageField");
		$f->showIf = "showUserImage=1";
		foreach($flds as $v => $l) {
			$attrs = [];
			if($v === $this->userImageField)
				$attrs['selected'] = 'selected';
			$f->addOption($v, $l, $attrs);
		}
		$f->attr('value', $this->userImageField);
		$wrap->add($f);
		
		return $wrap;
	}
}