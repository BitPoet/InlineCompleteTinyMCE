<?php namespace ProcessWire;

/**
 * ProcessWire module that adds inline autocomplete to TinyMCE.
 *
 * This is the "bare metal" and extension point for further plugins which
 * determine the exact behavior of the inline completion, which my be page
 * links, images, file links or Hanna Codes.
 *
 * Most settings are configurable in the module's configuration settings.
 *
 * Author: BitPoet
 * 
 * License:
 * Released under Mozilla Public License 2.0
 *
 */


class ProcessInlineCompleteTinyMCE extends Process implements ConfigurableModule {


	public static function getModuleInfo() {
		return [
			"title"			=>	"Autocomplete for TinyMCE",
			"summary"		=>	"Allow quick insertion of PW items inside TinyMCE",
			"version"		=>	"0.0.3",
			"autoload"		=>	function() {
				$p = wire('page');
				if(! $p->template == "admin") return false;
				if($p->process == "ProcessPageEdit" || $p->process == "ProcessField") return true;
				return false;
			},
			"installs"		=>	[
				"InlineCompleteTinyMCEAction"
			],
			"page"			=>	[
				"name"			=>	"icompletetinymce",
				"title"			=>	"TinyMCE Inline Complete",
				"status"		=>	"hidden"
			]
		];
	}	


	public function __construct() {
		$this->set("actions", array());
	}


	/**
	 * Initialization
	 */
	public function init() {
		
		$class = $this->modules->getModuleClass($this);
		$path  = $this->config->paths->templates . "styles" . \DIRECTORY_SEPARATOR;
		$url   = $this->config->urls->templates . "styles/";
		$name  = $class . ".css";
		if(! file_exists($path . $name)) {
			$name  = $class . "Default.css";
			$url   = $this->config->urls->$class;
			$path  = $this->config->paths->$class;
		}
		$ts    = filemtime($path . $name);
		$info  = self::getModuleInfo();
		$this->config->styles->add($url . $name . "?v=" . $info["version"] . "-" . $ts);
		
		parent::init();
		
		$this->addHookAfter("InputfieldTinyMCE::renderReadyHook", $this, "injectSettings");
		$this->addHookAfter("InputfieldTinyMCE::getConfigInputfields", $this, "addEditorConfig");
		$this->addHookAfter("ProcessPageEdit::execute", $this, "addPlugins");
	}


	/**
	 * Call the registerActions hookable as soon as the module is ready.
	 */	
	public function ready() {
		$this->actions = $this->registerActions();
	}


	/**
	 * Add plugin to TinyMCE in ProcessPageEdit
	 */
	public function addPlugins(HookEvent $event) {
		
		if($this->input->get('InputfieldFileAjax')) return;
		
		$pg = $event->object->getPage();
		$hasTMCE = false;
		foreach($pg->template->fields as $f) {
			if($f->type instanceof FieldtypeTextarea && $f->type->getInputfield($pg, $f) instanceof InputfieldTinyMCE) {
				$hasTMCE = true;
				break;
			}
		}
		if(! $hasTMCE) return;
		
		$plugin_url = $this->config->urls->{$this->className};
		$plugin_path = $this->config->paths->{$this->className};
		$info  = self::getModuleInfo();
		$mt = filemtime($plugin_path . "inlinecomplete" . DIRECTORY_SEPARATOR . "plugin.js");
		$vParam = "?v=" . $mt;
		
		$this->config->scripts->add($plugin_url .  "inlinecomplete/plugin.js" . $vParam);
	}


	/**
	 *
	 * Filter pages by the value supplied in $_POST["filter"]
	 *
	 * Performs a LIKE database search matching anywhere in the hanna code name
	 *
	 */
	public function ___execute() {
		
		if(! $this->config->ajax) {
			return "<p>" . $this->_("This page acts as an AJAX-only interface for the Autocomplete module") . "</p>";
		}
		
		if(count($this->actions) == 0) $this->actions = $this->registerActions();

		header('Content-Type: application/json');
		
		$ret = [];
		
		$get = $this->input->get;
		
		if(! $get->action || ! $get->page || ! $get->field || ! $get->filter) {
			$this->log->error(sprintf($this->_("Missing GET parameters for %s::execute"), $this->className));
			echo json_encode($ret);
			return;
		}
		
		$pageId = (int)$this->input->get->page;
		$editPage = $this->pages->get($pageId);
		$fieldName = $this->sanitizer->fieldName($get->field);
		$actionName = $this->sanitizer->name($get->action);
		
		if($editPage instanceof NullPage) {
			$err = sprintf($this->_("Invalid page %d"), $pageId);
			$this->log->error($err);
			$ret = ['error' => $err];
			echo json_encode($ret);
			return;
		}
		
		if(! $editPage->editable($fieldName)) {
			$err = sprintf($this->_("No permission to edit field %s on page %d"), $fieldName, $pageId);
			$this->log->error($err);
			$ret = ['error' => $err];
			echo json_encode($ret);
			return;
		}
		
		foreach($this->actions as $action) {
			if($action->name == $actionName) {
				break;
			}
		}
		
		if(! $action) {
			$err = sprintf($this->_("No such action: %s"), $actionName);
			$this->log->error($err);
			$ret = ['error' => $err];
			echo json_encode($ret);
			return;
		}
		
		/**
		 * Apply field settings to actions
		 */
		$field = $this->fields->get($fieldName);
		
		$prefix = $fieldName . "__" . $action->name . "__";

		if(! $field->{$prefix . "useAction"}) {
			$err = sprintf($this->_("Inactive action: %s"), $action->name);
			$this->log->error($err);
			$ret = ['error' => $err];
			echo json_encode($ret);
			return;
		}
			
		foreach($field->getArray() as $prop => $val) {
			if(strpos($prop, $prefix) === 0) {
				$realProp = str_replace($prefix, '', $prop);
				$action->set($realProp, $val);
			}
		}

		$ret = $action->executeFilter($get);
		
		echo json_encode($ret, \JSON_PRETTY_PRINT);
	}


	/**
	 *
	 * Inject editor settings into the PW javascript config object
	 *
	 */
	public function injectSettings(HookEvent $event) {
		
		$editor = $event->object;
		
		$fname = $editor->attr('name');
		$field = $this->fields->get($fname);

		$actions = [];

		$defaultConf = [
			"url"				=>		$this->pages->get("template=admin, name=icompletetinymce")->url,
			"name"				=>		$fname,
			"page"				=>		(int)$this->input->get->id
		];

		foreach($this->actions as $action) {
			$prefix = $fname . "__" . $action->name . "__";

			if(! $field->{$prefix . "useAction"}) continue;
			
			$conf = $action->getActionSettings();
			$conf["action"] = $action->name;

			foreach($field->getArray() as $prop => $val) {
				if(strpos($prop, $prefix) === 0) {
					$realProp = str_replace($prefix, '', $prop);
					$action->set($realProp, $val);
				}
			}
			
			$sFields = $action->getSettingsFields($field, $prefix);
			
			foreach($sFields->children as $sField) {
				if($sField instanceof InputfieldMarkup) continue;
				$name = $sField->attr('name');
				$conf[$name] = $field->{$prefix . $name} ?: $action->$name;
			}
			
			$sFields = null;
			
			$conf = array_merge($defaultConf, $conf);
			
			$actions[] = $conf;
		}

		$cfgName = $editor->className() . '_' . $editor->name;
		if(strpos($cfgName, '_repeater')) $cfgName = preg_replace('/_repeater\d+/', '', $cfgName);
		
		$config = $this->config->js($cfgName);
		
		$config["inlinecomplete"] = array("actions" => $actions);
		
		$this->config->js($cfgName, $config);
	}


	/**
	 * All actions register themselves by hooking into this method
	 * and adding themselves to the returned array
	 */
	public function ___registerActions() {
		return array();
	}

	/**
	 *
	 * Add own configuration fields to CKEditor input config
	 *
	 */
	public function addEditorConfig(HookEvent $event) {

		$editor = $event->object;
		
		$outer = $event->return;
		$tinyMCEConfigWrap = $outer->get('_tinymce');
		
		$fname = $editor->attr('name');
		$field = $this->fields->get($fname);
		
		foreach($this->actions as $action) {
			
			$actionName = str_replace('InlineCompleteTinyMCEAction', '', $action->className);
			$prefix = $fname . "__" . $action->name . "__";			
			
			$useAction = $this->modules->get("InputfieldCheckbox");
			$useAction->checkedValue = "1";
			$useAction->attr('name', $prefix . "useAction");
			$useAction->label = sprintf($this->_("Autocomplete action '%s'"), $actionName);
			$useAction->checkboxLabel = sprintf($this->_("Use Autocomplete action '%s' in this field"), $actionName);
			if($field->{$prefix . "useAction"} == "1") $useAction->attr('checked', 'checked');
			$tinyMCEConfigWrap->append($useAction);
			
			$wrapper = $this->modules->get("InputfieldFieldset");
			$wrapper->label = sprintf($this->_("Autocomplete Settings for '%s' Action"), $actionName);
			$wrapper->showIf = $prefix . "useAction=1";
			
			$sFields = $action->getSettingsFields($field, $prefix);
			
			$subfieldNames = [];
			foreach($sFields->children() as $sf) {
				$subfieldNames[] = $sf->attr('name');
			}
			
			foreach($sFields->children as $sField) {
				
				if($sField instanceof InputfieldMarkup) continue;
				
				$sFields->remove($sField);
				$name = $sField->attr('name');
				$sField->attr('name', $prefix . $name);
				
				if($sField->showIf) {
					foreach($subfieldNames as $sfn) {
						$sField->showIf = preg_replace("/\\b$sfn\\b/", $prefix . $sfn, $sField->showIf);
					}
				}
				
				if($sField instanceof InputfieldCheckbox) {
					$this->log->message("Name: " . $sField->attr('name') . ", Type: {$sField->type}");
					if($field->{$prefix . $name} == $sField->checkedValue)
						$sField->attr('checked', 'checked');
						
				} else {
					$this->log->message("Name: " . $sField->attr('name') . ", Type: {$sField->type}");
					$sField->attr('value', $field->{$prefix . $name} ?: $action->$name);
					
				}
				
				$wrapper->add($sField);
				
			}
			
			//$outer->append($wrapper);
			$tinyMCEConfigWrap->append($wrapper);
		}
		
		$event->return = $outer;

	}


	/**
	 *
	 * Get module configuration fields
	 *
	 */
	public function getModuleConfigInputfields($data) {
		$inputfields = new InputfieldWrapper();
		
		return $inputfields;
	}


}
